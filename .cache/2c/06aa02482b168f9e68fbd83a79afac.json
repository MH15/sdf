{"id":"core/index.ts","dependencies":[{"name":"/Users/matthewhall/github/mh15/sdf/package.json","includedInParent":true,"mtime":1607962322957},{"name":"./Game","loc":{"line":6,"column":37},"parent":"/Users/matthewhall/github/mh15/sdf/core/index.ts","resolved":"/Users/matthewhall/github/mh15/sdf/core/Game.ts"}],"generated":{"js":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Game_1 = __importDefault(require(\"./Game\"));\n\nvar game = new Game_1.default(\"regl\");\ngame.start(); // import REGL = require('regl')\n// let regl = REGL(document.getElementById(\"regl\"))\n// // This clears the color buffer to black and the depth buffer to 1\n// regl.clear({\n//     color: [0, 0, 0, 1],\n//     depth: 1\n// })\n// const draw = regl({\n//     frag: `\n//     precision highp float;\n//     uniform vec2 u_resolution;\n//     uniform vec2 u_mouse;\n//     uniform float u_time;\n//     float plot(vec2 st, float pct){\n//       return  smoothstep( pct-0.02, pct, st.y) -\n//               smoothstep( pct, pct+0.02, st.y);\n//     }\n// float sdCircle(in vec2 p, in vec2 pos, float radius)\n// {\n//     return length(p-pos)-radius;\n// }\n// float sdBox(in vec2 p, in vec2 pos, in vec2 size)\n// {\n//     vec2 d = abs(p-pos)-size;\n//     return min(0.0, max(d.x, d.y))+length(max(d,0.0));\n// }\n// // polynomial smooth min (k = 0.1);\n// float sminCubic(float a, float b, float k)\n// {\n//     float h = max(k-abs(a-b), 0.0);\n//     return min(a, b) - h*h*h/(6.0*k*k);\n// }\n// float opU(float d1, float d2)\n// {\n//     return min(d1, d2);\n// }\n// float opBlend(float d1, float d2)\n// {\n//     float k = 0.2;\n//     return sminCubic(d1, d2, k);\n// }\n// float opSmoothUnion( float d1, float d2, float k ) {\n//     float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n//     return mix( d2, d1, h ) - k*h*(1.0-h); }\n// float sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n// {\n//     r.xy = (p.x>0.0)?r.xy : r.zw;\n//     r.x  = (p.y>0.0)?r.x  : r.y;\n//     vec2 q = abs(p)-b+r.x;\n//     return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n// }\n// float opRound( in vec2 p, in float r )\n// {\n//   return sdBox(p, vec2(1., 0.), vec2(.1)) - r;\n// }\n// float opRoundBox( in vec2 p, in vec2 pos, in vec2 size, in float r )\n// {\n//   return sdBox(p, pos, size) - r;\n// }\n// // https://www.shadertoy.com/view/ll2GD3\n// vec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n// {\n//     t = clamp(t, 0., 1.);\n//     return a + b*cos(6.28318*(c*t+d));\n// }\n// vec3 shade(float sd)\n// {\n//     float maxDist = 2.0;\n//     vec3 palCol = palette(clamp(0.5-sd*0.4, -maxDist,maxDist), \n//                       vec3(0.3,0.3,0.0),vec3(0.8,0.8,0.1),vec3(0.9,0.7,0.0),vec3(0.3,0.9,0.8));\n//     vec3 col = palCol;\n//     // Darken around surface\n// \tcol = mix(col, col*1.0-exp(-10.0*abs(sd)), 0.4);\n// \t// repeating lines\n//     col *= 0.8 + 0.2*cos(150.0*sd);\n//     // White outline at surface\n//     col = mix(col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(sd)));\n//     return col;\n// }\n// float sdf(vec2 p)\n// {\n//     float d = 1000.0;\n//     float a = sdCircle(p, vec2(0., 0.), 0.35);\n//     //float b = sdCircle(p, vec2( 0.7 + sin(iTime/2.)/2., 0.1), 0.55);\n//     //float c = sdBox(p, vec2( -0.7 + sin(iTime/2.)/2., -.4), vec2(.5));\n//     //return sminCubic(sminCubic(a,b,.2),c,.6);\n//    //float a = sdBox(p, vec2(0., -1.), vec2(.5));\n//     //float a = opRoundBox(p, vec2(1,1), vec2(.5),.1);\n//     float b = opRoundBox(p, vec2(-1,0), vec2(.5),.1);\n// \treturn opSmoothUnion(a,b,.4); \n// \treturn a;\n// }\n// vec2 screenToWorld(vec2 screen)\n// {\n//     vec2 result = 2.0 * (screen/u_resolution.xy - 0.5);\n//     result.x *= u_resolution.x/u_resolution.y;\n//     return result;\n// }\n// void main(){\n//   vec2 st = gl_FragCoord.xy/u_resolution;\n//   float y = st.x;\n//   vec3 color = vec3(y);\n//   // Plot a line\n//   float pct = plot(st,y);\n//   color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n//   gl_FragColor = vec4(st.x,st.y,0.0,1.0);\n//   vec2 fragCoord = gl_FragCoord.xy;\n//     // project screen coordinate into world\n// \tvec2 p = screenToWorld(fragCoord);\n//     // signed distance for scene\n//     float sd = sdf(p);\n// // compute signed distance to a colour\n//     vec3 col = shade(sd);\n// \tgl_FragColor = vec4(col, 1.0);\n// \t//if (distance(fragCoord, vec2(0,0)) < 1000.) {\n// \t//\tgl_FragColor = vec4(1,0,0,0);\n// \t//}\n// }\n//   `,\n//     vert: `\n//     attribute vec2 position;\n//     void main(){\n//       gl_Position = vec4(position, 0, 1);\n//     }\n//   `,\n//     count: 4,\n//     primitive: 'triangle fan',\n//     uniforms: {\n//         //@ts-ignore\n//         u_resolution: regl.prop('resolution')\n//     },\n//     attributes: {\n//         position: [\n//             [-1, -1], [-1, 1], [1, 1], [1, -1]\n//         ]\n//     }\n// })\n// regl.frame(() => {\n//     let resolution = [window.innerWidth, window.innerHeight]\n//     draw({\n//         resolution\n//     })\n// })"},"sourceMaps":{"js":{"mappings":[{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":4}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":10}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":13}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":28}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":29}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":36}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":37}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":45}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":46}},{"source":"core/index.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":47}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":15,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":4},"generated":{"line":15,"column":4}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":8},"generated":{"line":15,"column":8}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":15,"column":11}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":15},"generated":{"line":15,"column":15}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":15},"generated":{"line":15,"column":21}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":15},"generated":{"line":15,"column":22}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":15,"column":29}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":20},"generated":{"line":15,"column":30}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":11},"generated":{"line":15,"column":36}},{"source":"core/index.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":15,"column":37}},{"source":"core/index.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":16,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":5,"column":4},"generated":{"line":16,"column":4}},{"source":"core/index.ts","name":null,"original":{"line":5,"column":5},"generated":{"line":16,"column":5}},{"source":"core/index.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":16,"column":10}},{"source":"core/index.ts","name":null,"original":{"line":9,"column":0},"generated":{"line":16,"column":14}},{"source":"core/index.ts","name":null,"original":{"line":11,"column":0},"generated":{"line":17,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":12,"column":0},"generated":{"line":18,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":13,"column":0},"generated":{"line":19,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":14,"column":0},"generated":{"line":20,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":15,"column":0},"generated":{"line":21,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":16,"column":0},"generated":{"line":22,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":18,"column":0},"generated":{"line":23,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":24,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":25,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":26,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":23,"column":0},"generated":{"line":27,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":28,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":26,"column":0},"generated":{"line":29,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":27,"column":0},"generated":{"line":30,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":28,"column":0},"generated":{"line":31,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":29,"column":0},"generated":{"line":32,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":30,"column":0},"generated":{"line":33,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":31,"column":0},"generated":{"line":34,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":32,"column":0},"generated":{"line":35,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":33,"column":0},"generated":{"line":36,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":53,"column":0},"generated":{"line":52,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":54,"column":0},"generated":{"line":53,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":55,"column":0},"generated":{"line":54,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":56,"column":0},"generated":{"line":55,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":57,"column":0},"generated":{"line":56,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":59,"column":0},"generated":{"line":57,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":60,"column":0},"generated":{"line":58,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":61,"column":0},"generated":{"line":59,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":64,"column":0},"generated":{"line":60,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":65,"column":0},"generated":{"line":61,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":62,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":67,"column":0},"generated":{"line":63,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":68,"column":0},"generated":{"line":64,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":69,"column":0},"generated":{"line":65,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":70,"column":0},"generated":{"line":66,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":72,"column":0},"generated":{"line":67,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":73,"column":0},"generated":{"line":68,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":74,"column":0},"generated":{"line":69,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":75,"column":0},"generated":{"line":70,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":77,"column":0},"generated":{"line":71,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":78,"column":0},"generated":{"line":72,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":79,"column":0},"generated":{"line":73,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":80,"column":0},"generated":{"line":74,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":81,"column":0},"generated":{"line":75,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":82,"column":0},"generated":{"line":76,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":83,"column":0},"generated":{"line":77,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":84,"column":0},"generated":{"line":78,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":85,"column":0},"generated":{"line":79,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":86,"column":0},"generated":{"line":80,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":89,"column":0},"generated":{"line":81,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":90,"column":0},"generated":{"line":82,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":91,"column":0},"generated":{"line":83,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":92,"column":0},"generated":{"line":84,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":93,"column":0},"generated":{"line":85,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":95,"column":0},"generated":{"line":86,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":97,"column":0},"generated":{"line":87,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":98,"column":0},"generated":{"line":88,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":99,"column":0},"generated":{"line":89,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":100,"column":0},"generated":{"line":90,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":101,"column":0},"generated":{"line":91,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":102,"column":0},"generated":{"line":92,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":104,"column":0},"generated":{"line":93,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":105,"column":0},"generated":{"line":94,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":108,"column":0},"generated":{"line":95,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":109,"column":0},"generated":{"line":96,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":110,"column":0},"generated":{"line":97,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":112,"column":0},"generated":{"line":98,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":113,"column":0},"generated":{"line":99,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":114,"column":0},"generated":{"line":100,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":116,"column":0},"generated":{"line":101,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":118,"column":0},"generated":{"line":102,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":119,"column":0},"generated":{"line":103,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":120,"column":0},"generated":{"line":104,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":121,"column":0},"generated":{"line":105,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":123,"column":0},"generated":{"line":106,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":124,"column":0},"generated":{"line":107,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":126,"column":0},"generated":{"line":108,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":127,"column":0},"generated":{"line":109,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":128,"column":0},"generated":{"line":110,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":129,"column":0},"generated":{"line":111,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":130,"column":0},"generated":{"line":112,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":131,"column":0},"generated":{"line":113,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":133,"column":0},"generated":{"line":114,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":134,"column":0},"generated":{"line":115,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":136,"column":0},"generated":{"line":116,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":138,"column":0},"generated":{"line":117,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":140,"column":0},"generated":{"line":118,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":141,"column":0},"generated":{"line":119,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":142,"column":0},"generated":{"line":120,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":144,"column":0},"generated":{"line":121,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":146,"column":0},"generated":{"line":122,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":148,"column":0},"generated":{"line":123,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":149,"column":0},"generated":{"line":124,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":151,"column":0},"generated":{"line":125,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":152,"column":0},"generated":{"line":126,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":154,"column":0},"generated":{"line":127,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":155,"column":0},"generated":{"line":128,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":157,"column":0},"generated":{"line":129,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":159,"column":0},"generated":{"line":130,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":160,"column":0},"generated":{"line":131,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":161,"column":0},"generated":{"line":132,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":163,"column":0},"generated":{"line":133,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":166,"column":0},"generated":{"line":134,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":170,"column":0},"generated":{"line":135,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":171,"column":0},"generated":{"line":136,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":172,"column":0},"generated":{"line":137,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":173,"column":0},"generated":{"line":138,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":174,"column":0},"generated":{"line":139,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":175,"column":0},"generated":{"line":140,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":177,"column":0},"generated":{"line":141,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":178,"column":0},"generated":{"line":142,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":180,"column":0},"generated":{"line":143,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":181,"column":0},"generated":{"line":144,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":182,"column":0},"generated":{"line":145,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":183,"column":0},"generated":{"line":146,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":185,"column":0},"generated":{"line":147,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":186,"column":0},"generated":{"line":148,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":187,"column":0},"generated":{"line":149,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":188,"column":0},"generated":{"line":150,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":189,"column":0},"generated":{"line":151,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":190,"column":0},"generated":{"line":152,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":192,"column":0},"generated":{"line":153,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":193,"column":0},"generated":{"line":154,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":194,"column":0},"generated":{"line":155,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":195,"column":0},"generated":{"line":156,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":196,"column":0},"generated":{"line":157,"column":0}},{"source":"core/index.ts","name":null,"original":{"line":197,"column":0},"generated":{"line":158,"column":0}}],"sources":{"core/index.ts":"import Game from \"./Game\"\n\nlet game = new Game(\"regl\")\n\ngame.start()\n\n\n\n// import REGL = require('regl')\n\n// let regl = REGL(document.getElementById(\"regl\"))\n// // This clears the color buffer to black and the depth buffer to 1\n// regl.clear({\n//     color: [0, 0, 0, 1],\n//     depth: 1\n// })\n\n// const draw = regl({\n//     frag: `\n//     precision highp float;\n\n//     uniform vec2 u_resolution;\n//     uniform vec2 u_mouse;\n//     uniform float u_time;\n\n//     float plot(vec2 st, float pct){\n//       return  smoothstep( pct-0.02, pct, st.y) -\n//               smoothstep( pct, pct+0.02, st.y);\n//     }\n// float sdCircle(in vec2 p, in vec2 pos, float radius)\n// {\n//     return length(p-pos)-radius;\n// }\n\n// float sdBox(in vec2 p, in vec2 pos, in vec2 size)\n// {\n//     vec2 d = abs(p-pos)-size;\n//     return min(0.0, max(d.x, d.y))+length(max(d,0.0));\n// }\n\n// // polynomial smooth min (k = 0.1);\n// float sminCubic(float a, float b, float k)\n// {\n//     float h = max(k-abs(a-b), 0.0);\n//     return min(a, b) - h*h*h/(6.0*k*k);\n// }\n\n// float opU(float d1, float d2)\n// {\n//     return min(d1, d2);\n// }\n\n// float opBlend(float d1, float d2)\n// {\n//     float k = 0.2;\n//     return sminCubic(d1, d2, k);\n// }\n\n// float opSmoothUnion( float d1, float d2, float k ) {\n//     float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n//     return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\n// float sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n// {\n//     r.xy = (p.x>0.0)?r.xy : r.zw;\n//     r.x  = (p.y>0.0)?r.x  : r.y;\n//     vec2 q = abs(p)-b+r.x;\n//     return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n// }\n\n// float opRound( in vec2 p, in float r )\n// {\n//   return sdBox(p, vec2(1., 0.), vec2(.1)) - r;\n// }\n\n// float opRoundBox( in vec2 p, in vec2 pos, in vec2 size, in float r )\n// {\n//   return sdBox(p, pos, size) - r;\n// }\n// // https://www.shadertoy.com/view/ll2GD3\n// vec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n// {\n//     t = clamp(t, 0., 1.);\n//     return a + b*cos(6.28318*(c*t+d));\n// }\n\n\n// vec3 shade(float sd)\n// {\n//     float maxDist = 2.0;\n//     vec3 palCol = palette(clamp(0.5-sd*0.4, -maxDist,maxDist), \n//                       vec3(0.3,0.3,0.0),vec3(0.8,0.8,0.1),vec3(0.9,0.7,0.0),vec3(0.3,0.9,0.8));\n\n//     vec3 col = palCol;\n\n//     // Darken around surface\n// \tcol = mix(col, col*1.0-exp(-10.0*abs(sd)), 0.4);\n// \t// repeating lines\n//     col *= 0.8 + 0.2*cos(150.0*sd);\n//     // White outline at surface\n//     col = mix(col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(sd)));\n\n//     return col;\n// }\n\n\n// float sdf(vec2 p)\n// {\n//     float d = 1000.0;\n\n//     float a = sdCircle(p, vec2(0., 0.), 0.35);\n//     //float b = sdCircle(p, vec2( 0.7 + sin(iTime/2.)/2., 0.1), 0.55);\n//     //float c = sdBox(p, vec2( -0.7 + sin(iTime/2.)/2., -.4), vec2(.5));\n\n//     //return sminCubic(sminCubic(a,b,.2),c,.6);\n\n//    //float a = sdBox(p, vec2(0., -1.), vec2(.5));\n//     //float a = opRoundBox(p, vec2(1,1), vec2(.5),.1);\n//     float b = opRoundBox(p, vec2(-1,0), vec2(.5),.1);\n// \treturn opSmoothUnion(a,b,.4); \n\n// \treturn a;\n// }\n\n// vec2 screenToWorld(vec2 screen)\n// {\n//     vec2 result = 2.0 * (screen/u_resolution.xy - 0.5);\n//     result.x *= u_resolution.x/u_resolution.y;\n//     return result;\n// }\n\n// void main(){\n//   vec2 st = gl_FragCoord.xy/u_resolution;\n\n//   float y = st.x;\n\n//   vec3 color = vec3(y);\n\n//   // Plot a line\n//   float pct = plot(st,y);\n//   color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n//   gl_FragColor = vec4(st.x,st.y,0.0,1.0);\n\n//   vec2 fragCoord = gl_FragCoord.xy;\n\n//     // project screen coordinate into world\n// \tvec2 p = screenToWorld(fragCoord);\n\n//     // signed distance for scene\n//     float sd = sdf(p);\n\n// // compute signed distance to a colour\n//     vec3 col = shade(sd);\n\n// \tgl_FragColor = vec4(col, 1.0);\n\n// \t//if (distance(fragCoord, vec2(0,0)) < 1000.) {\n// \t//\tgl_FragColor = vec4(1,0,0,0);\n// \t//}\n\n// }\n\n\n//   `,\n\n\n\n//     vert: `\n//     attribute vec2 position;\n//     void main(){\n//       gl_Position = vec4(position, 0, 1);\n//     }\n//   `,\n\n//     count: 4,\n//     primitive: 'triangle fan',\n\n//     uniforms: {\n//         //@ts-ignore\n//         u_resolution: regl.prop('resolution')\n//     },\n\n//     attributes: {\n//         position: [\n//             [-1, -1], [-1, 1], [1, 1], [1, -1]\n//         ]\n//     }\n// })\n\n// regl.frame(() => {\n//     let resolution = [window.innerWidth, window.innerHeight]\n//     draw({\n//         resolution\n//     })\n// })"},"lineCount":null}},"error":null,"hash":"df2d6b4a21d97beaccc061be23e0f849","cacheData":{"env":{}}}