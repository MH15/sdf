{"version":3,"sources":["core/cells/Cell.ts","core/helpers/random.ts","core/helpers/Vector2.ts","core/Grid.ts","core/Game.ts","core/index.ts"],"names":[],"mappings":";;;;;;AEAA,IAAA,OAAA;AFAA,AEAA,ADAA,IDAA,IAAA,CCAgB,YAAhB,CAA6B,KAA7B,EAA4C,KAA5C,EAAyD;ADAzD,AEAA,ADCI,SAAO,GCDX,CDCe,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,KAA3B,IAAoC,KAA3C;ADDJ,AEGI,ADDH,WCCG,CFHJ,MEGI,CAAY,CAAZ,EAAuB,CAAvB,EAAgC;AFDhC,AEEI,SAAK,CAAL,CFFJ,EEEa,CAAT,CFFJ,CAAY,CAAZ,EAAuB,CAAvB,EAAgC;AADzB,AEIH,ADLR,OAAA,CAAA,CDCW,AEIE,CAAL,GAAS,CAAT,GFJG,GAAqB,ACDhC,GAAA,KDCwC,CAAC,KAA9B,CCDX;ADIK,AEEA,AGNL,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;AHQI;AFHJ,AKHA,IAAI,IAAI,CLGR,EKHW,ELGX,EKHe,MAAA,CAAA,OAAJ,CAAS,MAAT,CAAX;ALFA,AKIA,CLJA,EAAA,CKII,CAAC,KAAL,IAIA;AAEA;AACA;ALJA,AKKA,ILLY,QAAZ;AEKI,AGCJ,EHDI,OAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAqB;AFLzB,AEMQ,AGCR,CLPA,UAAY,AEMG,IAAI,IFNnB,EAAoB,CEML,CAAY,KAAK,CAAL,GAAS,KAAK,CAAC,CAA3B,EAA8B,KAAK,CAAL,GAAS,KAAK,CAAC,CAA7C,CAAP;AFLJ,AEMC,AGCL,ELPI,CEIA,OFJA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACA,AEOA,AGCJ,ELRI,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,AKQJ,ELRI,QAAA,CAAA,QAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,AKQJ,ELRI,QAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACH,AKSD,CLdA,EAAY,QAAQ,GAAR,OAAA,CAAA,QAAA,KAAA,OAAA,CAAA,QAAA,GAAQ,EAAR,CAAZ;AEaI,AGEJ;AHDI,AGEJ;AHDI,AGGJ;AACA;AHFI,AGGJ;AACA;AACA;AACA;AACA;AACA;AAEA;AHLI,AGMJ,EHNI,OAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAuB,GAAvB,EAAmC;AAC/B,AGMR,QHNY,KAAK,CAAL,GAAS,KAAK,CAAC,CAAf,IAAoB,KAAK,CAAL,GAAS,GAAG,CAAC,CAArC,EAAwC;AACpC,AGMZ,UHNgB,KAAK,CAAL,GAAS,KAAK,CAAC,CAAf,IAAoB,KAAK,CAAL,GAAS,GAAG,CAAC,CAArC,EAAwC;AACpC,AGMhB,eHNuB,IAAP;AACH,AGOb;ADxCA,AFkCS,AGOT,IDzCA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;AC0CA;ADzCA,AFkCQ,AGQR,ID1CA,OFkCe,EElCf,GAAA,AFkCQ,eElCR,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;AFmCK,AGQL,GHfI;AE3BJ,ADFA,AE6CA,ID3CA,ADFA,ICEA,EDFA,CCEA,EDFA,KCEA,CAAA,MAAA,ADFA,CCEA,ADFA,OAAA,CAAA,cAAA,CAAA,CAAA;ADsCA,AGSA,SHTA,OAAA;AEnCA,ADFA,ADDA,AGgDA,CHhDA,EAAA,CEGA,ADFA,ICEA,GAAA,CDFA,GAAA,GCEA,CAAA,GDFA,CCEA,ADFA,CCEA,iBDFA,CAAA;ACGA,AC6CA;AF/CA,AEgDA,IFhDA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;AEkDA;AFhDA,AEiDA,IFjDA,IAAA;AAAA,AEkDA;AD9CA,ADJA,AEmDA,ID/CA,IAAA,IDJA;ACIA,ADEI,AE8CJ,WF9CI,IAAA,CAAY,KAAZ,EAA2B,MAA3B,EAAyC;ACF7C,ADGQ,AE+CR,SF/Ca,GCHb,EDGQ,GAAa,KAAb;ACgBJ,ADfI,AE+CR,SF/Ca,ECeT,IAAA,ADfI,CCeQ,EDfM,MCelB,ADfI,ECewB;AAhB5B,ADEI,AE+CR,SDjDI,ADES,ICFT,CDEI,ECFW,CDEE,CCFjB,CDEI;ACDJ,ACmDJ,SDnDI,IAAA,GAAe,KAAK,IAApB;AASA,ADPI,AEkDR,SD3CI,ADPS,IAAI,CAAC,GCOd,ADPyB,CAArB,ECOO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","file":"core.2c2c6bf7.js","sourceRoot":"..","sourcesContent":["export default class Cell {\n    public cellType: CellType = CellType.Empty\n    constructor(x: number, y: number) {\n\n    }\n}\n\nexport enum CellType {\n    Empty,\n    Full,\n    Expanded,\n    Bump\n}","export function randIntRange(start: number, count: number) {\n    return Math.floor(Math.random() * count) + start\n}","export default class Vector2 {\n    public x: number\n    public y: number\n    constructor(x: number, y: number) {\n        this.x = x\n        this.y = y\n    }\n\n    /**\n     * Returns (this.x/other.x, this.y/other.y)\n     * @param other another Vector2\n     */\n    divide(other: Vector2): Vector2 {\n        return new Vector2(this.x / other.x, this.y / other.y)\n    }\n\n    /**\n     * Returns (this.x/scalar, this.y/scalar)\n     * @param scalar factor\n     */\n    // divide(scalar: number): Vector2 {\n    //     return new Vector2(this.x / scalar, this.y / scalar)\n    // }\n\n    /**\n     * Check if a Vector is inside a 2d range\n     * @param start the (0,0) of the range\n     * @param end the (width, height) of the range\n     */\n    inside(start: Vector2, end: Vector2): boolean {\n        if (this.x > start.x && this.x < end.x) {\n            if (this.y > start.y && this.y < end.y) {\n                return true\n            }\n        }\n        return false\n    }\n\n}","import Cell, { CellType } from \"./cells/Cell\"\nimport { randIntRange } from \"./helpers/random\"\nimport Vector2 from \"./helpers/Vector2\"\n\nexport default class Grid {\n    public store: Cell[][]\n    private width: number\n    private height: number\n\n\n    constructor(width: number, height: number) {\n        this.width = width\n        this.height = height\n        this.store = []\n        for (var y: number = 0; y < height; y++) {\n            this.store[y] = []\n            for (var x: number = 0; x < width; x++) {\n                this.store[y][x] = new Cell(y, x)\n            }\n        }\n    }\n\n    private getRandomIndex() {\n        var x = randIntRange(0, this.width)\n        var y = randIntRange(0, this.height)\n        return new Vector2(x, y)\n    }\n\n    public addNode(): Vector2 {\n        var pos = this.getRandomIndex()\n        // console.log(pos)\n        return pos\n\n    }\n\n    public generate(count: number): void {\n        /**\n         * Steps:\n         * - find a set of `n` points inside the Grid\n         * - move 1-3 cells randomly from each point, adding new points to the set\n         */\n\n        var points: Vector2[] = []\n        for (let i = 0; i < count; i++) {\n            points.push(this.addNode())\n        }\n        console.log(points)\n\n\n        points.forEach(point => {\n            // let c = new Cell(point.x, point.y)\n            // c.cellType = CellType.Full\n            this.store[point.y][point.x].cellType = CellType.Full\n        })\n\n    }\n\n    private getAdjacentPosition(pos: Vector2): Vector2 | false {\n        let next = new Vector2(pos.x, pos.y)\n        let dir = randIntRange(0, 3) // 0: Left, 1: Up, 2: Right, 3: Down\n        switch (dir) {\n            case 0: // Left\n                next.x -= 1\n                break\n            case 1: // Up\n                next.y -= 1\n                break\n            case 2: // Right\n                next.x += 1\n                break\n            case 3: // Down\n                next.y += 1\n                break\n        }\n        // check if next is inside the Grid bounds\n        // if not, recurse until it is\n        if (next.inside(new Vector2(0, 0), new Vector2(this.width, this.height))) {\n            console.log(\"reee\")\n            return next\n        } else {\n            console.log(\"yer\")\n            return false\n        }\n\n    }\n\n    public expand(): void {\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                let c = this.store[y][x]\n                if (c.cellType == CellType.Full) {\n                    // choose a direction to expand in\n                    let nextCell = this.getAdjacentPosition(new Vector2(x, y))\n                    if (nextCell == false) {\n                        c.cellType = CellType.Bump\n                    } else {\n                        this.store[nextCell.y][nextCell.x].cellType = CellType.Expanded\n                    }\n                }\n            }\n        }\n    }\n\n    public print(): void {\n        let s = \"\"\n        this.store.forEach((row) => {\n            row.forEach(col => {\n                s += col.cellType + \", \"\n            })\n            s += \"\\n\"\n        })\n        console.log(s)\n    }\n}","import Grid from \"./Grid\"\nimport Vector2 from \"./helpers/Vector2\"\nimport REGL = require('regl')\nimport {readFileSync} from 'fs'\n/**\n * Manage the Game state between Regl and position/collision logic\n */\n\nexport default class Game {\n    canvas: HTMLCanvasElement\n    canvasSize: Vector2\n    rows: number = 10\n    cols: number = this.rows\n    regl: REGL.Regl\n\n    blockSize: Vector2\n    grid: Grid\n    draw: any\n\n    fragShader: string\n\n    lastTime = 0.0\n    currentTime = 0.0\n    deltaTime = 0.0\n\n    positions: Vector2[] = []\n\n    constructor(canvasID: string) {\n        this.canvas = <HTMLCanvasElement>document.getElementById(canvasID)\n        this.canvasSize = new Vector2(this.canvas.width, this.canvas.height)\n        this.blockSize = this.canvasSize.divide(new Vector2(this.rows, this.cols))\n        this.grid = new Grid(this.rows, this.cols)\n\n        this.grid.generate(4)\n        this.grid.expand()\n\n        this.regl = REGL(this.canvas)\n\n        this.regl.clear({\n            color: [0, 0, 0, 1],\n            depth: 1\n        })\n\n        this.fragShader = readFileSync('./core/shaders/frag.glsl','utf8')\n\n        this.positions = [\n            new Vector2(0,0),\n            new Vector2(1,0),\n            new Vector2(1,1),\n            new Vector2(3,3),\n            new Vector2(4,3),\n            new Vector2(5,5),\n            new Vector2(6,6),\n            new Vector2(7,7),\n            new Vector2(8,8),\n            new Vector2(9,9),\n            new Vector2(10,10),\n\n        ]\n    }\n\n    start() {\n        this.draw = this.regl({\n            frag: this.fragShader,\n            vert: `\n                attribute vec2 position;\n                void main() {\n                    gl_Position = vec4(position, 0, 1);\n                }\n            `,\n            // enough vertices to cover the canvas\n            count: 4,\n            // two triangles\n            primitive: 'triangle fan',\n\n            // pass screen space resolution to fragment shader\n            uniforms: {\n                // @ts-ignore\n                u_resolution: this.regl.prop('resolution'),\n                // @ts-ignore\n                u_test: this.regl.prop('test'),\n                // Dynamic properties can be functions.  Each function gets passed:\n                //\n                //  * context: which contains data about the current regl environment\n                //  * props: which are user specified arguments\n                //  * batchId: which is the index of the draw command in the batch\n                //\n                // @ts-ignore\n                // u_coords: this.regl.prop('coords'),\n                \n                // u_coords: {\n                //     data: [[0,0],[0,0],[0,0],[0,0]],\n                //     length: 2\n                // },\n                ...[...new Array(10)].reduce((acc, val, index) => {\n                    let vec = this.positions[index]\n                    // @ts-ignore\n                    acc[`u_coords[${index}]`] = [vec.x, vec.y]\n                    console.log([vec.x, vec.y])\n                    return acc;\n                 }, {}),\n                // @ts-ignore\n                u_smooth_factor: this.regl.prop(\"smooth_factor\")\n            },\n\n\n\n            attributes: {\n                // the positions of our four corners in world psace\n                position: [\n                    [-1, -1], [-1, 1], [1, 1], [1, -1]\n                ]\n            }\n        })\n\n        this.regl.frame(() => {\n            this.update()\n        })\n    }\n\n\n    private getCoords() {\n        let buf = this.regl.buffer(Float32Array.from([\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n            0.0,\n        ]))\n        return buf;\n    }\n\n    private update() {\n        let resolution = [this.canvas.width, this.canvas.height]\n        let test = 0.5\n        // console.log(this.regl.context(\"time\"))\n\n        let coords = this.getCoords()\n\n        let smooth = +(<HTMLInputElement>document.querySelector(\"#scale-input\")).value\n        // 0.16 is good\n\n        this.draw({\n            resolution,\n            test,\n            coords,\n            smooth_factor: smooth\n        })\n        // send state to regl\n        // no draw() method as regl takes care of this\n\n        // user input\n\n\n        // collision detection\n\n\n        // position update\n\n\n        // send to regl\n    }\n}","import Game from \"./Game\"\n\nlet game = new Game(\"regl\")\n\ngame.start()\n\n\n\n// import REGL = require('regl')\n\n// let regl = REGL(document.getElementById(\"regl\"))\n// // This clears the color buffer to black and the depth buffer to 1\n// regl.clear({\n//     color: [0, 0, 0, 1],\n//     depth: 1\n// })\n\n// const draw = regl({\n//     frag: `\n//     precision highp float;\n\n//     uniform vec2 u_resolution;\n//     uniform vec2 u_mouse;\n//     uniform float u_time;\n\n//     float plot(vec2 st, float pct){\n//       return  smoothstep( pct-0.02, pct, st.y) -\n//               smoothstep( pct, pct+0.02, st.y);\n//     }\n// float sdCircle(in vec2 p, in vec2 pos, float radius)\n// {\n//     return length(p-pos)-radius;\n// }\n\n// float sdBox(in vec2 p, in vec2 pos, in vec2 size)\n// {\n//     vec2 d = abs(p-pos)-size;\n//     return min(0.0, max(d.x, d.y))+length(max(d,0.0));\n// }\n\n// // polynomial smooth min (k = 0.1);\n// float sminCubic(float a, float b, float k)\n// {\n//     float h = max(k-abs(a-b), 0.0);\n//     return min(a, b) - h*h*h/(6.0*k*k);\n// }\n\n// float opU(float d1, float d2)\n// {\n//     return min(d1, d2);\n// }\n\n// float opBlend(float d1, float d2)\n// {\n//     float k = 0.2;\n//     return sminCubic(d1, d2, k);\n// }\n\n// float opSmoothUnion( float d1, float d2, float k ) {\n//     float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n//     return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\n// float sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n// {\n//     r.xy = (p.x>0.0)?r.xy : r.zw;\n//     r.x  = (p.y>0.0)?r.x  : r.y;\n//     vec2 q = abs(p)-b+r.x;\n//     return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n// }\n\n// float opRound( in vec2 p, in float r )\n// {\n//   return sdBox(p, vec2(1., 0.), vec2(.1)) - r;\n// }\n\n// float opRoundBox( in vec2 p, in vec2 pos, in vec2 size, in float r )\n// {\n//   return sdBox(p, pos, size) - r;\n// }\n// // https://www.shadertoy.com/view/ll2GD3\n// vec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n// {\n//     t = clamp(t, 0., 1.);\n//     return a + b*cos(6.28318*(c*t+d));\n// }\n\n\n// vec3 shade(float sd)\n// {\n//     float maxDist = 2.0;\n//     vec3 palCol = palette(clamp(0.5-sd*0.4, -maxDist,maxDist), \n//                       vec3(0.3,0.3,0.0),vec3(0.8,0.8,0.1),vec3(0.9,0.7,0.0),vec3(0.3,0.9,0.8));\n\n//     vec3 col = palCol;\n\n//     // Darken around surface\n// \tcol = mix(col, col*1.0-exp(-10.0*abs(sd)), 0.4);\n// \t// repeating lines\n//     col *= 0.8 + 0.2*cos(150.0*sd);\n//     // White outline at surface\n//     col = mix(col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(sd)));\n\n//     return col;\n// }\n\n\n// float sdf(vec2 p)\n// {\n//     float d = 1000.0;\n\n//     float a = sdCircle(p, vec2(0., 0.), 0.35);\n//     //float b = sdCircle(p, vec2( 0.7 + sin(iTime/2.)/2., 0.1), 0.55);\n//     //float c = sdBox(p, vec2( -0.7 + sin(iTime/2.)/2., -.4), vec2(.5));\n\n//     //return sminCubic(sminCubic(a,b,.2),c,.6);\n\n//    //float a = sdBox(p, vec2(0., -1.), vec2(.5));\n//     //float a = opRoundBox(p, vec2(1,1), vec2(.5),.1);\n//     float b = opRoundBox(p, vec2(-1,0), vec2(.5),.1);\n// \treturn opSmoothUnion(a,b,.4); \n\n// \treturn a;\n// }\n\n// vec2 screenToWorld(vec2 screen)\n// {\n//     vec2 result = 2.0 * (screen/u_resolution.xy - 0.5);\n//     result.x *= u_resolution.x/u_resolution.y;\n//     return result;\n// }\n\n// void main(){\n//   vec2 st = gl_FragCoord.xy/u_resolution;\n\n//   float y = st.x;\n\n//   vec3 color = vec3(y);\n\n//   // Plot a line\n//   float pct = plot(st,y);\n//   color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);\n\n//   gl_FragColor = vec4(st.x,st.y,0.0,1.0);\n\n//   vec2 fragCoord = gl_FragCoord.xy;\n\n//     // project screen coordinate into world\n// \tvec2 p = screenToWorld(fragCoord);\n\n//     // signed distance for scene\n//     float sd = sdf(p);\n\n// // compute signed distance to a colour\n//     vec3 col = shade(sd);\n\n// \tgl_FragColor = vec4(col, 1.0);\n\n// \t//if (distance(fragCoord, vec2(0,0)) < 1000.) {\n// \t//\tgl_FragColor = vec4(1,0,0,0);\n// \t//}\n\n// }\n\n\n//   `,\n\n\n\n//     vert: `\n//     attribute vec2 position;\n//     void main(){\n//       gl_Position = vec4(position, 0, 1);\n//     }\n//   `,\n\n//     count: 4,\n//     primitive: 'triangle fan',\n\n//     uniforms: {\n//         //@ts-ignore\n//         u_resolution: regl.prop('resolution')\n//     },\n\n//     attributes: {\n//         position: [\n//             [-1, -1], [-1, 1], [1, 1], [1, -1]\n//         ]\n//     }\n// })\n\n// regl.frame(() => {\n//     let resolution = [window.innerWidth, window.innerHeight]\n//     draw({\n//         resolution\n//     })\n// })"]}